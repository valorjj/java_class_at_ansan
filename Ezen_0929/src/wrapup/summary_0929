자바는 100% 객체 지향 언어이다. 

객체 : [클래스] 설계도 기반으로 생성된 메모리 공간 
변수 : [자료형] 하나의 값을 저장할 수 있는 메모리 공간 
// 변수도 사실 wrapper class 하나이다. 결국 클래스의 일종임. 

클래스 : 설계도 
	1. System : 시스템 클래스
		.out.print()
		.out.println()
		.out.printf()
	2. Scanner : 입력 클래스 
	
자료형 
	boolean : 논리 1비트
	char : 문자 2바이트 [유니코드]
	byte : 정수 1바이트
	short : 정수 2바이트
	int : 정수 4바이트 [기본 정수 자료형, 굳이 지정하지 않아도 기본으로 Integer 값으로 들어간다]
	long : 정수 8바이트
	float : 실수 4바이트 [소숫점 8자리 표현]
	double : 실수 8바이트 [소숫점 16자리 표현]
	
String 의 비교 
String 은 비교연산자를 사용할 수 없다. 

Literal 을 사용하게 되면, String Constant Pool 영역에 존재한다.
New 를 사용하면 Heap 영역에 생성된다. 
String 을 리터럴로 선언하면 내부적으로 String의 intern() 메서드를 호출한다.
intern() 메서드는 주어진 문자열이 string constant pool 에 존재하는지 검색하고, 존재하면 그 주소값을 반환한다. 

주소값이 검색되지 않는다면 string constant pool 에 넣고 새로운 주소값을 반환한다. 

'==' 연산자와 String 클래스의 equals() 메소드의 가장 큰 차이점은

'==' 비교연산자는 두 대상의 주소값을 비교한다.
equals() 는 두 대상의 값 자체를 비교한다.

일반적인 int, char 등은 call By value 형태로 대상에 주소값을 가지지 않는 형태로 사용된다.
하지만 String 은 일반적인 type 이 아니라 Class 이다

여기서 잠깐, 기본형 타입이란 ?

Primitive Type :
	총 8가지 기본형 타입을 미리 정의하여 제공한다.
	기본값이 있기 때문에 null 값이 존재하지 않는다. null 을 넣으려면 래퍼 클래스를 활용한다.
	실제값을 저장하는 공간으로 Stack 메모리에 저장된다.

Reference Type :
	참조형 타입 
	빈 객체를 의미하는 Null 값이 존재한다.
	값이 저장되어 있는 주소값을 저장하는 공간으로 Heap 메모리에 저장된다. 
	

class 는 기본적으로 call By reference 형태로 생성 시 주소값이 부여된다.

== 연산자의 경우 객체의 주소값을 비교하기 때문에 일반 객체처럼 Heap 영역에 생성된 String 객체와 리터럴을 이용해 string constant pool에 저장된 String 객체의 주소값은 다를 수밖에 없습니다. 
그러므로 두개의 값은 서로 다르다는 결론이 나오게 됩니다. 
이러한 경우가 발생할 수 있기에 자바에서 문자열을 비교하려면 equals라는 메서드를 활용하여 두개의 값을 비교해주어야 합니다.

System.out.println("str1 == str2 ? " + Objects.equals(str1, str2));
System.out.println("str1 == str3 ? " + Objects.equals(str1, str3));

* 여기서 Stack 영역에 대해서 짚고 넘어가자.

즉, Stack 영역은 LIFO(Last In First Out)의 구조를 갖고 변수에 새로운 데이터가 할당되면 이전 데이터는 지워진다는 것을 알 수 있다.

https://www.baeldung.com/java-string-constant-pool-heap-stack

